keyword," feature, example usage "
" checked, unchecked"," In C#, checked statement blocks or expressions can enable run-time checking for Arithmetic overflow.Arithmetic overflow "
" get, set"," C# implements Property (computer science) as part of the language syntax with their optional corresponding get and set accessors, as an alternative for the Property (computer science) used in Java, which is not a language feature but a coding-pattern based on method name conventions. "
goto," C# supports the Goto (command) keyword. This can occasionally be useful, for example for implementing Goto (command) or for Goto (command), but the use of a more structured method of Goto (command) is usually recommended (see Goto (command)). Java does not support the goto statement (but goto is a reserved word). However, Java does support labeled break and continue statements, which in certain situations can be used when a goto statement might otherwise be used.  switch(color){ case Color.Blue: Console.WriteLine(""Color is blue""); break; case Color.DarkBlue: Console.WriteLine(""Color is dark""); goto case Color.Blue; // ...}  "
lock," In C#, the lock keyword is a shorthand for synchronizing access to a block of code across threads (using a Monitor), wrapped in a try ... finally block. "
" out, ref"," C# has support for output and reference Parameter (computer science). These allow returning multiple output values from a method, or passing values by reference. "
strictfp,Java uses Strictfp to guarantee the results of floating point operations remain the same across platforms.
switch," In C#, the Switch statement also operates on strings and longs. Fallthrough is allowed for empty statements and possible via 'goto case' for statements containing code. Java's switch statement operates on strings (since Switch statement) but not the long primitive type, and falls through for all statements (excluding those with 'break').Switch statement "
synchronized," In Java, the synchronized keyword is a shorthand for synchronizing access to a block of code across threads (using a Monitor), wrapped in a try ... finally block. "
throws,Java requires every method to declare the checked exceptions or superclasses of the checked exceptions that it can throw. Any method can also optionally declare the unchecked exception that it throws. C# has no such syntax.  public int readItem() throws java.io.IOException { // ...}
using," In C#, using causes the Dispose method (implemented via the IDisposable Interface (object-oriented programming)) of the object declared to be executed after the code block has run or when an exception is thrown within the code block.  // Create a small file ""test.txt"", write a string,// ... and close it (even if an exception occurs)using (StreamWriter file = new StreamWriter(""test.txt"")){ file.Write(""test"");}  In Java SE 7 a similar construct has been addedInterface (object-oriented programming) called try-with-resources:   try (BufferedReader br = new BufferedReader(new FileReader(path))) { return br.readLine();}  "
