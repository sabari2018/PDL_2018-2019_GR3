,calling a function,basic/void function,value-returning function,required Main function
Ada (programming language)Ada (programming language),foo  «(parameters)»,procedure  foo  «(parameters)» is begin statements end foo,function  foo  «(parameters)» return type is begin statements end foo,N/A
ALGOL 68,foo «(parameters)»;,proc  foo  = «(parameters)» Void type: (  instructions  );,proc  foo  = «(parameters)» rettype: (  instructions ...; retvalue  );,N/A
APL (programming language),«parameters»  foo  parameters,foo ←{ statements },foo ←{ statements },N/A
C (C99),foo(«parameters»),Void type foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; }," «global declarations»   int main(«int argc, char *argv[]») {   instructions   } "
Objective-C,,,,
C++ (STL),,,,
Java,,,,public static void main(String[] args) { instructions } or  public static void main(StringVariadic function args) { instructions }
D,,,,int main(«char[][] args») { instructions} or  int main(«string[] args») { instructions} or  void main(«char[][] args») { instructions} or  void main(«string[] args») { instructions}
C#,," Same as above; alternatively, if only one statement: Void type foo(«parameters») => statement;  "," Same as above; alternatively, if simple enough to be an expression: Void type foo(«parameters») => expression;  "," static void Main(«string[] args») method_body May instead return int. (starting with C# 7.1:) May return Task or Task<int>, and if so, may be async.  "
JavaScript,," function foo(«parameters») { instructions } or  var foo = function («parameters») {instructions } or  var foo = new Function («""parameter"", ... ,""last parameter""» ""instructions""); ",function foo(«parameters») { instructions ... return value; },N/A
Go,,func foo(«parameters») { instructions },func foo(«parameters») type { instructions ... return value },func main() { instructions }
Swift,,func foo(«parameters») { instructions },func foo(«parameters») -> type { instructions ... return value },N/A
Common Lisp,(foo «parameters»),(Defun foo («parameters»)   instructions )   or  (setf (symbol-function 'symbol)   function ),(Defun foo («parameters»)   ...   value ),N/A
Scheme,,(define (foo parameters) instructions) or   (define foo (Anonymous function (parameters) instructions)),(define (foo parameters) instructions... return_value) or   (define foo (Anonymous function (parameters) instructions... return_value)),
ISLISP,,(Defun foo («parameters»)   instructions ),(Defun foo («parameters»)   ...   value ),
Pascal,foo«(parameters)»,procedure foo«(parameters)»; «forward;»[a]  «label   label declarations»   «const   constant declarations»   «type   type declarations»   «var   variable declarations»   «local function declarations» begin   instructions  end;,function foo«(parameters)»: type; «forward;»[a]  «label   label declarations»   «const   constant declarations»   «type   type declarations»   «var   variable declarations»   «local function declarations» begin   instructions ;   foo := value  end;,program name;  «label   label declarations»   «const   constant declarations»   «type   type declarations»   «var   variable declarations»   «function declarations» begin   instructions   end.
Visual Basic,Foo(«parameters»),Sub Foo«(parameters)»   instructions   End Sub,Function Foo«(parameters)»« As type»   instructions   Foo = value  End Function,Sub Main()   instructions  End Sub
Visual Basic .NET,,," Same as above; alternatively: Function Foo«(parameters)»« As type»   instructions Return value  End Function   The As clause is not required if Option Strict is off. A type character may be used instead of the As clause. If control exits the function without a return value having been explicitly specified, the function returns the default value for the return type.  ",Sub Main(««ByVal »args() As String»)   instructions   End Subor Function Main(««ByVal »args() As String») As Integer    instructions  End Function
Xojo,,,,
Python,foo(«parameters»),def foo(«parameters»):   Tab ↹ instructions,def foo(«parameters»):   Tab ↹ instructions   Tab ↹ return value,N/A
S-Lang,foo(«parameters» «;qualifiers»),define foo («parameters») { instructions },define foo («parameters») { instructions ... return value; },public define slsh_main () { instructions }
Fortran,foo («arguments»)   CALL sub_foo («arguments»)[c],SUBROUTINE sub_foo («arguments»)   instructions   END SUBROUTINE[c],type FUNCTION foo («arguments»)   instructions   ...   foo = value   END FUNCTION[c],PROGRAM main   instructions   END PROGRAM
Forth,«parameters» FOO,: FOO  «  stack effect comment:  ( before -- ) »   instructions   ;,: FOO  «  stack effect comment:  ( before -- after ) »   instructions   ;,N/A
PHP,foo(«parameters»),function foo(«parameters») { instructions },function foo(«parameters») { instructions ... return value; },N/A
Perl,foo(«parameters») or   &amp;foo«(parameters)»,sub foo { «my (parameters) = @_;» instructions },sub foo { «my (parameters) = @_;» instructions... «return» value; },
Raku,foo(«parameters») or   &amp;foo«(parameters)»,«multi »sub foo(parameters) { instructions },«our «type» »«multi »sub foo(parameters) { instructions... «return» value; },
Ruby,foo«(parameters)»,def foo«(parameters)»   instructions   end,def foo«(parameters)»   instructions   « return» value   end,
Rust,foo(«parameters»),fn foo(«parameters») { instructions },fn foo(«parameters») -> type { instructions },fn main() { instructions }
Scala,foo«(parameters)»,def foo«(parameters)»«: Unit =» { instructions },def foo«(parameters)»«: type» = { instructions ... «return» value },def main(args: Array[String]) { instructions }
Windows PowerShell,foo «parameters»,function foo  { instructions }; or function foo { «param(parameters)» instructions },function foo «(parameters)»  { instructions  … return value }; or function foo { «param(parameters)» instructions … return value },N/A
Bash shell,foo «parameters»,function foo {      instructions  }  or  foo () {      instructions   },function foo {      instructions      return «exit_code»  }  or  foo () {      instructions      return «exit_code»   },
"   parameters  $n ($1, $2, $3, ...) $@ (all parameters) $# (the number of parameters) $0 (this function name)   ",,,
,OCaml,foo parameters,let «rec» foo parameters = instructions,,let «rec» foo parameters = instructions... return_value
F#,[<EntryPoint>] let main args = instructions,,,,
Standard ML,fun foo parameters = ( instructions ),,fun foo parameters = ( instructions... return_value ),
Haskell,foo parameters = do Tab ↹ instructions,,foo parameters = return_value   or   foo parameters = do Tab ↹ instructions Tab ↹ return value,«main :: IO ()»   main = do instructions
Eiffel,foo («parameters»),foo («parameters»)    require   preconditions   do   instructions   ensure   postconditions   end,foo («parameters»): type    require   preconditions   do   instructions   Result := value   ensure   postconditions   end,[b]
CoffeeScript,foo(),foo = ->,foo = -> value,N/A
,foo parameters,foo = () ->,foo = ( parameters ) -> value,
COBOL," CALL ""foo"" «USING parameters»   «exception-handling»   «END-CALL»[d] ",«IDENTIFICATION DIVISION.»  PROGRAM-ID. foo.  «other divisions...»  PROCEDURE DIVISION «USING parameters».     instructions .,«IDENTIFICATION DIVISION.»  PROGRAM-ID/FUNCTION-ID. foo.  «other divisions...»  DATA DIVISION.  «other sections...»  LINKAGE SECTION.  «parameter definitions...»  variable-to-return definition  «other sections...»  PROCEDURE DIVISION «USING parameters» RETURNING variable-to-return.     instructions .,N/A
,«FUNCTION» foo«(«parameters»)»,N/A,,
