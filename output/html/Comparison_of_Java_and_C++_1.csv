C++,Java
Extends C (programming language) with C (programming language) and C (programming language). C code can most properly be used.,Strongly influenced by C++/C syntax.
" Compatible with C (programming language) source code, except for a few C (programming language). ",Provides the Java Native Interface and recently Java Native Interface as a way to directly call C/C++ code.
" Write once, compile anywhere (WOCA). "," Write once, run anywhere/everywhere (WORA/WORE). "
" Allows Procedural programming, Procedural programming, Procedural programming, Procedural programming, and Procedural programming. Favors a mix of paradigms. "," Allows Procedural programming, Procedural programming (since Java 8) and Procedural programming (since Java 5), but strongly encourages the Procedural programming Procedural programming. Includes support for creating Procedural programming. "
Runs as native executable machine code for the target Instruction set(s).,Runs on a Java virtual machine.
Provides object types and type names. Allows reflection via Run-time type information (RTTI).," Is Reflection (computer programming), allowing metaprogramming and dynamic code generation at runtime. "
Has multiple binary compatibility standards (commonly Microsoft (for MSVC compiler) and Itanium/GNU (for almost all other compilers)).," Has one binary compatibility standard, Cross-platform for OS and compiler. "
" Optional automated Bounds checking (e.g., the at() method in vector and string containers). ",All operations are required to be bound-checked by all compliant distributions of Java. HotSpot can remove bounds checking.
Native Unsigned (arithmetic) support.," Native unsigned arithmetic unsupported. Java 8 changes some of this, but aspects are unclear.[1] "
" Standardized minimum limits for all numerical types, but the actual sizes are implementation-defined. Standardized types are available via the standard library <cstdint>. ",Standardized limits and sizes of all primitive types on all platforms.
" Pointers, references, and pass-by-value are supported for all types (primitive or user-defined). ",All types (primitive types and reference types) are always passed by value.[2]
" Memory management can be done Memory management via new / delete, automatically by scope, or by smart pointers. Supports deterministic destruction of objects. Memory management ABI standardized in C++11, though compilers are not required to implement garbage collection. ",Automatic Garbage collection (computer science). Supports a non-deterministic finalize() method use of which is not recommended.Garbage collection (computer science)
Resource management (computing) can be done manually or by automatic lifetime-based resource management (Resource management (computing)).," Resource management must generally be done manually, or automatically via finalizers, though this is generally discouraged. Has try-with-resources for automatic scope-based resource management (version 7 onwards). It can also be done using the internal API sun.misc.Unsafe but that usage is highly discouraged and will be replaced by a public API in an upcoming Java version.  "
" Supports classes, structs (Passive data structure (PDS) types), and unions, and can allocate them on the Passive data structure or the Passive data structure. ",Classes are allocated on the Dynamic memory allocation. Dynamic memory allocation optimizes with Dynamic memory allocation to allocate some objects on the Dynamic memory allocation.
" Allows explicitly overriding types, and some implicit narrowing conversions (for compatibility with C). ",Rigid Type safety except for widening conversions.
" The C++ Standard Library was designed to have a limited scope and functions, but includes language support, diagnostics, general utilities, strings, locales, containers, algorithms, C++ Standard Library, numerics, input/output, random number generators, regular expression parsing, threading facilities, type traits (for static type introspection) and Standard C Library. The C++ Standard Library offers more functions including network I/O. A rich amount of third-party libraries exist for GUI and other functions like: C++ Standard Library (ACE), C++ Standard Library, various C++ Standard Library C++ Standard Library (IM) libraries,C++ Standard Library C++ Standard Library, C++ Standard Library, C++ Standard Library.  "," The standard library has grown with each release. By version 1.6, the library included support for locales, logging, containers and iterators, algorithms, GUI programming (but not using the system GUI), graphics, multi-threading, networking, platform security, introspection, dynamic class loading, blocking and non-blocking I/O. It provided interfaces or support classes for XML, XML, XML, database connectivity, naming services (e.g. XML), cryptography, security services (e.g. XML), print services, and web services. SWT offered an abstraction for platform-specific GUIs, but was superseded by XML in the latest releases ; allowing for graphics acceleration and CSS-themable UIs. Although it doesn't support any kind of ""native platform look"" support. "
Operator overloading for most operators. Preserving meaning (semantics) is highly recommended.,Operators are not overridable. The language overrides + and += for the String class.
" Single and Multiple inheritance of classes, including virtual inheritance. ",Only supports single inheritance of classes.
Compile-time templates. Allows for Turing complete meta-programming.," Generics in Java are used to achieve basic type-parametrization, but they do not translate from source code to byte code due to the use of Generics in Java by the compiler. "
" Function pointers, function objects, lambdas (in C++11), and interfaces. "," Functions references, function objects and lambdas were added in Java 8. Classes (and interfaces, which are classes) can be passed as references as well through SomeClass.class "
No standard inline documentation mechanism. Third-party software (e.g. Doxygen) exists.,Extensive Javadoc documentation standard on all system classes and methods.
" const keyword for defining immutable variables and member functions that do not change the object. Const-ness is propagated as a means to enforce, at compile-time, correctness of the code with respect to mutability of objects (see Const-correctness). "," final provides a version of const, equivalent to type* const pointers for objects and const for primitive types. Immutability of object members achieved via read-only interfaces and object encapsulation. "
Supports the Goto statement.," Supports labels with loops and statement blocks. goto is a reserved keyword but is marked as ""unused"" in the Java specification. "
" Source code can be written to be Cross-platform (can be compiled for Cross-platform, Cross-platform, Cross-platform, Cross-platform, Cross-platform, etc., without modification) and written to use platform-specific features. Typically compiled into native machine code, must be recompiled for each target platform. "," Compiled into Java bytecode for the Java bytecode. Byte code is dependent on the Java platform, but is typically independent of Java bytecode specific features. "
