while,do while,for i = first to last,foreach
Ada,while condition loop statements end loop,loop statementsexit when not condition end loop,for index in «reverse» [first .. last  discrete_type] loop statements end loop,for item of «reverse» iterator loop statements end loop  (for [all  some] [in  of] [first .. last  discrete_type  iterator] => predicate)Ada_quantifiers[b]
ALGOL 68,align=center «for index» «from first» «by increment» «to last» «while condition» do statements od,,,| <code>for key «to upb list» do «typename val=list[key];» statements od</code>
,«while condition»     do statements od,«while statements; condition»     do statements od,<code>«for index» «from first» «by increment» «to last» do statements od</code>,
APL,:While conditionstatements :EndWhile,:Repeat statements:Until condition,:For var«s» :In liststatements :EndFor,:For var«s» :InEach liststatements :EndFor
C (C99),instructions can be a single statement or a block in the form of: { statements }
while (condition) instructions,,do instructions while (condition);,for («type» i = first; i  last; i++) instructions,{{n/a}}
Objective-C,,,,<code>for (type item in set) instructions</code>
C++ (STL),,,,<code>«std::»for_each(start, end, function)</code>
([[C++11]]) <code>for (type item : set) instructions</code>
C#,,,,<code>foreach (type item in set) instructions</code>
Java,,,,<code>for (type item : set) instructions</code>
JavaScript,,,<code>for (var i = first; i <nowiki><=</nowiki> last; i++) instructions</code>,<code>for (var item of set) instructions</code> (since [[EcmaScript]] 2015)
PHP,,,<code>foreach (range(first, last) as $i) instructions or <br/> for ($i = first; $i <= last; $i++) instructions</code>,<code>foreach (set as item) instructions<br/> or <br/> foreach (set as key => item) instructions</code>
Windows PowerShell,,,<code>for ($i = first; $i -le last; $i++) instructions</code>,<code>foreach (item in set) instructions using item</code>
D,,,<code>foreach (i; first ... last) instructions</code>,<code>foreach («type» item; set) instructions</code>
Go,for condition { instructions },,for i := first; i  last; i++ { instructions }," for key, item := range set { instructions }"
Swift,while condition { instructions },repeat { instructions } while condition (2.x) do { instructions } while condition (1.x),for i = first ... last { instructions } or  for i = first .. or  for var i = first; i  last; i++ { instructions },for item in set { instructions }
Perl,while (condition) { instructions } or  until (notcondition) { instructions },do { instructions } while (condition) or  do { instructions } until (notcondition),for«each» «$i» (first .. last) { instructions } or  for ($i = first; $i,for«each» «$item» (set) { instructions }
Raku,while condition { instructions } or  until notcondition { instructions },repeat { instructions } while condition or  repeat { instructions } until notcondition,for  first..last -> $i  { instructions } or  loop ($i = first; $i last; $i++) { instructions },for set« -> $item»  { instructions }
Ruby,while condition instructionsend  or  until notcondition instructions end,begin instructions end while condition  or  begin instructions end until notcondition,for i in first..last instructions end  or  for i in first...last+1 instructions end  or  first.upto(last) { i instructions },for item in set instructions end  or  set.each { item instructions }
Bash shell,while condition ;doinstructionsdone  or  until notcondition ;doinstructions done,n/a,for ((i = first; i  last; ++i)) ; doinstructionsdone,for item in set ;doinstructions done
Scala,while (condition) { instructions },do { instructions } while (condition),for (i  first to last «by 1») { instructions }orfirst to last «by 1» foreach (i => { instructions }),for (item  set) { instructions }orset foreach (item => { instructions })
Smalltalk,conditionBlock whileTrue: loopBlock,loopBlock doWhile: conditionBlock,first to: last do: loopBlock,collection do: loopBlock
Common Lisp,(loopwhile conditiondoinstructions) or  (do () (notcondition)instructions),(loopdoinstructionswhile condition),(loopfor i from first to last «by 1»doinstructions) or  (dotimes (i N)instructions) or (do ((i first (1+ i))) ((>= i last))instructions),(loopfor item in listdoinstructions) or  (loopfor item across vectordoinstructions) or  (dolist (item list)instructions) or (mapc function list) or  (map type function sequence)
Scheme,(do () (notcondition) instructions) or  (let loop () (if condition (begin instructions (loop)))),(let loop () (instructions (if condition (loop)))),(do ((i first (+ i 1))) ((>= i last)) instructions) or  (let loop ((i first)) (if (,(for-each (lambda (item) instructions) list)
ISLISP,(while condition instructions),(tagbody loop instructions (if condition (go loop)),(for ((i first (+ i 1))) ((>= i last)) instructions),(mapc (lambda (item) instructions) list)
Pascal,while condition do begin instructions end,repeat instructions until notcondition;,for i := first «step 1» to last do begin instructions end;step[a],for item in set do ...
Visual Basic,Do While condition instructionsLoop  or Do Until notcondition instructionsLoopor
While condition,
instructions
Wend (Visual Basic)
End While (Visual Basic .NET),Do instructions Loop While condition  or Do instructions Loop Until notcondition,i must be declared beforehand. For i = first To last« Step 1» instructions Next i,For Each item In set instructions Next item
Visual Basic .NET,,For i« As type» = first To last« Step 1» instructionsNext« i»step[a],| <code>For Each item« As type» In set <dl><dd>instructions</dd></dl> Next« item»</code>
Xojo,,,,<code>While condition <dl><dd>instructions</dd></dl>Wend</code>,<code>Do Until notcondition <dl><dd>instructions</dd></dl>Loop <br/> or <br/>Do <dl><dd>instructions</dd></dl> Loop Until notcondition</code>
Python,while condition :  Tab instructions  «else:  Tab instructions»,n/a," for i in range(first, last+1):  Tab instructions  «else:  Tab instructions»(Python 3.x) for i in xrange(first, last+1):  Tab instructions  «else:  Tabinstructions»(Python 2.x)",for item in set:  Tab instructions  «else:  Tab instructions»
S-Lang,while (condition) { instructions } «then optional-block»,do { instructions } while (condition) «then optional-block»,for (i = first; i  last; i++) { instructions } «then optional-block»,foreach item(set) «using (what)» { instructions } «then optional-block»
Fortran,DO WHILE (condition)  instructions ENDDO,DO  instructions  IF (condition) EXIT  ENDDO," DO I = first,last  instructions  ENDDO",n/a
Forth,BEGIN « instructions » condition WHILE instructions REPEAT,BEGIN  instructions condition UNTIL,limit start DO instructions LOOP,n/a
OCaml,while condition do instructions done,n/a,for i = first to last do instructions done,Array.iter (fun item -> instructions) array  List.iter (fun item -> instructions) list
F#,while condition do  Tab instructions,n/a,for i = first to last do  Tab instructions,for item in set do  Tab instructions  or  Seq.iter (fun item -> instructions) set
Standard ML,while condition do ( instructions ),n/a,,<code>Array.app (fn item <nowiki>=></nowiki> instructions) array <br/> app (fn item => instructions) list</code>
Haskell (GHC),n/a,,Control.Monad.forM_ [first..last] (\i -> do instructions),<code>Control.Monad.forM_ list (\item <nowiki>-></nowiki> do instructions)</code>
Eiffel,from setup until condition loop instructions end,,,
CoffeeScript,while condition expression,n/a,for i in [first..last] expression,for item in set expression
,<code>expression while condition</code>,,,
,<code>while condition then expression</code>,,,
,<code>until condition <dl><dd>expression</dd></dl></code>,,,
,expression until condition,,<code>for i in [first..last] then expression</code>,<code>for item in set then expression</code>
,until condition then expression,,<code>expression for i in [first..last]</code>,<code>expression for item in set</code>
COBOL,PERFORM procedure-1 «THROUGH procedure-2» ««WITH» TEST BEFORE» UNTIL conditionCOBOL THRU[c],PERFORM procedure-1 «THROUGH procedure-2» «WITH» TEST AFTER UNTIL conditionCOBOL THRU[c],PERFORM procedure-1 «THROUGH procedure-2» VARYING i FROM first BY increment UNTIL i > lastCOBOL GREATER THAN[d],n/a
,PERFORM ««WITH» TEST BEFORE» UNTIL condition  expression  END-PERFORM,PERFORM «WITH» TEST AFTER UNTIL condition  expression  END-PERFORM,<code>PERFORM VARYING i FROM first BY increment UNTIL i > last <dl><dd> expression </dd></dl> END-PERFORM{{ref|COBOL GREATER THAN|[d]}}</code>,
