,constructor,destructor,finalizer
ABAP Objects,methods constructor «importing parameter = argument»method constructor. instructions endmethod.,n/a,
APL (Dyalog),∇ name:Implements Constructor «:Base «expr»»instructions∇,,∇ name:Implements Destructorinstructions∇
C++ (STL),class(«parameters») «: initializers» { instructions },~class() { instructions },
C#,class(«parameters») { instructions },void Dispose(){ instructions },~class() { instructions }
D,this(«parameters») { instructions },,~this() { instructions }
eC,class() { instructions },~class() { instructions },
Java,class(«parameters») { instructions },,void finalize() { instructions }
Eiffel,,,
Objective-C (Cocoa),- (id)init { instructions... return self; } or  - (id)initWithFoo:parameter «bar:parameter ...» { instructions... return self; },- (void)dealloc { instructions },- (void)finalize { instructions }
Swift,init(«parameters») { instructions },deinit { instructions },
Python," def __init__(self«, parameters»): Tab instructions",,def __del__(self): Tab instructions
Visual Basic .NET,Sub New(«parameters») instructions End Sub,Sub Dispose() instructions End Sub,Overrides Sub Finalize() instructions End Sub
Xojo,Sub Constructor(«parameters») instructions End Sub,Sub Destructor() instructions End Sub,
PHP,function __construct(«parameters») { instructions },function __destruct() { instructions },
Perl," sub new { my ($class«, parameters») = @_; my $self = {}; instructions ... bless($self, $class); return $self; }",sub DESTROY { my ($self) = @_; instructions },
Raku," submethod BUILD { instructions } or «multi » method new(««$self: »parameters») { self.bless(*, field1 => value1, ...); ... instructions }",submethod DESTROY { instructions },
Ruby,def initialize«(parameters)»  instructions  end,n/a,
Windows PowerShell,n/a,,
OCaml,initializer instructions,n/a,
F#,do instructions or new(parameters) =  expression,member this.Dispose() = instructions,override this.Finalize() = instructions
JavaScript,function name(«parameters») { instructions },n/a,
JavaScript (ES6),constructor(«parameters») { instructions }
COBOL,n/a,n/a,
Cobra,cue init(parameters)Tab base.initTab instructions,def disposeTab instructions,
ISLISP,(defmethod initialize-object ((instance ) initvalues),
