[Paradigm]]
, Description
, Main traits
, Related paradigm(s)	
, [[Critique]]
, Examples
],
| Programs as [[Statement (programming)|statements]] that ''directly'' change computed [[State (computer science)|state]] ([[Field (computer science)|datafields]]),| Direct [[Assignment (computer science)|assignments]] common [[data structure]]s [[global variable]]s,| ,| [[Edsger W. Dijkstra]] [[Michael A. Jackson]],| [[C (programming language)|C]] [[C++]] [[Java (programming language)|Java]] [[Kotlin (programming language)|Kotlin]] [[PHP]] [[Python (programming language)|Python]] [[Ruby (programming language)|Ruby]] [[Wolfram Language]],
| A style of [[imperative programming]] with more logical program structure,| [[Structogram]]s [[Indent style|indentation]] no or limited use of [[goto]] statements,| Imperative,| ,| [[C (programming language)|C]] [[C++]] [[Java (programming language)|Java]] [[Kotlin (programming language)|Kotlin]] [[Pascal (programming language)|Pascal]] [[PHP]] [[Python (programming language)|Python]] [[Wolfram Language]],
| Derived from structured programming based on the concept of [[modular programming]] or the ''procedure call'',| [[Local variable]]s sequence selection [[iteration]] and [[Modular programming|modularization]],| Structured imperative,| ,| [[C (programming language)|C]] [[C++]] [[Lisp (programming language)|Lisp]] [[PHP]] [[Python (programming language)|Python]] [[Wolfram Language]],
| Treats [[computation]] as the evaluation of [[Function (mathematics)|mathematical functions]] avoiding [[Program state|state]] and [[Immutable object|mutable]] data,| [[Lambda calculus]] [[Denotational semantics#Compositionality|compositionality]] [[formula]] [[Recursion (computer science)|recursion]] [[referential transparency]] no [[Side effect (computer science)|side effects]],| Declarative,|,| [[C++]] [[Ruby (programming language)|Ruby]] [[Scala (programming language)|Scala]] [[SequenceL]] [[Standard ML]] [[JavaScript]] [[Elm (programming language)|Elm]] [[Wolfram Language]],
| [[Control flow]] is determined mainly by [[Event (computing)|events]] such as [[mouse click]]s or interrupts including timer,| [[Main loop]] event handlers [[Asynchronous programming|asynchronous processes]],| Procedural [[dataflow]],| ,|[[JavaScript]] [[ActionScript]] [[Visual Basic]] [[Elm (programming language)|Elm]],
| Treats [[Field (computer science)|datafields]] as ''objects'' manipulated through predefined [[Method (computer science)|methods]] only,| [[Object (computer science)|Objects]] methods [[message passing]] [[information hiding]] [[data abstraction]] [[Encapsulation (computer programming)|encapsulation]] [[Polymorphism (computer science)|polymorphism]] [[Inheritance (computer science)|inheritance]] [[serialization]]-marshalling,| Procedural,| [[Object-oriented programming#Criticism|Wikipedia]] othersref name="flaws"/ref name="executioniKoN"/,| [[Common Lisp]] [[C++]] [[C sharp (programming language)|C#]] [[Eiffel (programming language)|Eiffel]] [[Java (programming language)|Java]] [[Kotlin (programming language)|Kotlin]] [[PHP]] [[Python (programming language)|Python]] [[Ruby (programming language)|Ruby]] [[Scala (programming language)|Scala]] [[JavaScript]],
| Defines program logic but not detailed [[control flow]],| [[Fourth-generation programming language|Fourth-generation languages]] [[spreadsheet]]s [[report program generator]]s,| ,| ,| [[SQL]] [[regular expression]]s [[Prolog]] [[Web Ontology Language|OWL]] [[SPARQL]] [[XSLT]],
| Treats programs as a model of a [[finite state machine]] or any other formal automata,| State [[enumeration]] [[Control variable (programming)|control variable]] [[State (computer science)|state]] changes [[isomorphism]] [[state transition table]],| Imperative event-driven,| ,| [[Abstract State Machine Language]],
,