,8 bit (byte),,16 bit (short integer),,32 bit,,| 64 bit ([[long integer]]),,| Word size,,| Arbitrarily precise ([[Arbitrary-precision arithmetic|bignum]])
,Signed,Unsigned,Signed,Unsigned,Signed,Unsigned,Signed,Unsigned,Signed,Unsigned,
Ada,range -2**7 .. 2**7 - 1Ada_range[j],range 0 .. 2**8 - 1Ada_range[j] or mod 2**8Ada_mod[k],range -2**15 .. 2**15 - 1Ada_range[j],range 0 .. 2**16 - 1Ada_range[j] or mod 2**16Ada_mod[k],range -2**31 .. 2**31 - 1Ada_range[j],range 0 .. 2**32 - 1Ada_range[j] or mod 2**32Ada_mod[k],range -2**63 .. 2**63 - 1Ada_range[j],mod 2**64Ada_mod[k],IntegerAda_range[j],range 0 .. 2**IntegerSize - 1Ada_range[j] or mod IntegerSizeAda_mod[k],n/a
ALGOL 68 (variable-width),short short intCInt[c],n/a,short intCInt[c],n/a,intCInt[c],n/a,long intCInt[c],n/a,intCInt[c],n/a,long long int a68[a]a68g[g]
align=centerbytes  ; bits,,,,,,,,,,
,C (C99 fixed-width),int8_t,uint8_t,int16_t,uint16_t,int32_t,uint32_t,int64_t,uint64_t,intptr_tCInt[c],size_tCInt[c],{{n/a}}
C++ (C++11 fixed-width),,,,,,,,,,,
C (C99 variable-width),signed char,unsigned char,shortCInt[c],unsigned shortCInt[c],longCInt[c],unsigned longCInt[c],long longCInt[c],unsigned long longCInt[c],intCInt[c],unsigned intCInt[c],
C++ (C++11 variable-width),,,,,,,,,,,
Cocoa),signed char or int8_t,unsigned char or uint8_t,short or int16_t,unsigned short or uint16_t,int or int32_t,unsigned int or uint32_t,long long or int64_t,unsigned long long or uint64_t,NSInteger or long,NSUInteger or unsigned long,
C#,sbyte,byte,short,ushort,int,uint,long,ulong,IntPtr,UIntPtr,System.Numerics.BigInteger(.NET 4.0)
Java,byte,n/a,,charJava char[b],,n/a,,n/a,{{n/a}},{{n/a}},<code>java.math<wbr/>.BigInteger</code>
Go,int8,uint8 or byte,int16,uint16,int32,uint32,int64,uint64,int,uint,big.Int
Rust,i8,u8,i16,u16,i32,u32,i64,u64,isize,usize,n/a
Swift,Int8,UInt8,Int16,UInt16,Int32,UInt32,Int64,UInt64,Int,UInt
D,byte,ubyte,short,ushort,int,uint,long,ulong,n/a,n/a,BigInt
Common Lisp,(signed-byte 8),(unsigned-byte 8),(signed-byte 16),(unsigned-byte 16),(signed-byte 32),(unsigned-byte 32),(signed-byte 64),(unsigned-byte 64),,,bignum
Scheme,,,,,,,,,,,
ISLISP,,,,,,,,,,,bignum
Pascal (FPC),shortint,byte,smallint,word,longint,longword,int64,qword,integer,cardinal,n/a
Visual Basic,n/a,Byte,Integer,n/a,Long,n/a,n/a,,n/a,,{{n/a}}
Visual Basic .NET,SByte,,Short,UShort,Integer,UInteger,Long,ULong,<code>System.Numerics<wbr/>.BigInteger</code><br />(.NET 4.0),
FreeBasic,Byte or Integer,UByte or UInteger,Short or Integer,UShort or UInteger,Long or Integer,ULong or UInteger,LongInt or Integer,ULongInt or UInteger,Integer,UInteger,n/a
Python 2.x,n/a,,n/a,,n/a,,n/a,,<code>int</code>,{{n/a}},<code>long</code>
Python 3.x,n/a,,n/a,,n/a,,{{n/a}},,{{n/a}},,<code>int</code>
S-Lang,n/a,,n/a,,n/a,,{{n/a}},,{{n/a}},,{{n/a}}
Fortran,INTEGER(KIND = n)Kinds[f],n/a,INTEGER(KIND = n)Kinds[f],n/a,INTEGER(KIND = n)Kinds[f],n/a,INTEGER(KIND = n)Kinds[f],n/a,,,
PHP,n/a,,n/a,,int PHP 32/64 bit long[m],n/a,int PHP 32/64 bit long[m],n/a,{{n/a}},,{{ref|PHP bignum|[e]}}
Perl 5,scalars[d],,scalars[d],,scalars[d],,{{n/a}}{{ref|scalars|[d]}},,{{n/a}}{{ref|scalars|[d]}},,<code>Math::BigInt</code>
Raku,int8,uint8,int16,uint16,int32,uint32,int64,uint64,Int,n/a,
Ruby,n/a,,n/a,,n/a,,n/a,,<code>Fixnum</code>,{{n/a}},<code>Bignum</code>
ErlangErlang_int[n],n/a,,n/a,,n/a,,n/a,,integer(),{{n/a}},integer(){{ref|Erlang_arb|[o]}}
Scala,Byte,n/a,Short,CharScala Char[l],Int,n/a,Long,n/a,n/a,n/a,scala.math.BigInt
Seed7,n/a,n/a,n/a,n/a,n/a,n/a,integer,n/a,n/a,n/a,bigInteger
Smalltalk,n/a,,n/a,,n/a,,n/a,,<code>SmallInteger</code>{{ref|Smalltalk|[i]}},{{n/a}},<code>LargeInteger</code>{{ref|Smalltalk|[i]}}
Windows PowerShell,n/a,,n/a,,n/a,,{{n/a}},,{{n/a}},,{{n/a}}
OCaml,n/a,,n/a,,int32,n/a,int64,n/a,int  or  nativeint,,<code>open Big_int;; <br/> big_int</code>
F#,sbyte,byte,int16,uint16,int32 or int,uint32,,uint64,nativeint,unativeint,<code>bigint</code>
Standard ML,n/a,Word8.word,n/a,,Int32.int,Word32.word,Int64.int,Word64.word,int,word,<code>LargeInt.int</code> or <br /> <code>IntInf.int</code>
Haskell (GHC),«import Int»  Int8,«import Word»  Word8,«import Int»  Int16,«import Word»  Word16,«import Int»  Int32,«import Word»  Word32,«import Int»  Int64,«import Word»  Word64,Int,«import Word»  Word,Integer
Eiffel,INTEGER_8,NATURAL_8,INTEGER_16,NATURAL_16,INTEGER_32,NATURAL_32,INTEGER_64,NATURAL_64,INTEGER,NATURAL,n/a
Cobol[h],BINARY-CHAR «SIGNED»,BINARY-CHAR UNSIGNED,BINARY-SHORT «SIGNED»,BINARY-SHORT UNSIGNED,BINARY-LONG «SIGNED»,BINARY-LONG UNSIGNED,BINARY-DOUBLE «SIGNED»,BINARY-DOUBLE UNSIGNED,n/a,n/a,n/a
Mathematica,n/a,,n/a,,n/a,,{{n/a}},,{{n/a}},,<code>Integer</code>
Wolfram Language,n/a,,n/a,,n/a,,{{n/a}},,{{n/a}},,<code>Integer</code>
